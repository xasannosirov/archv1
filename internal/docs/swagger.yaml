definitions:
  entity.CreateMenuRequest:
    properties:
      content:
        additionalProperties:
          type: string
        type: object
      is_static:
        type: boolean
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      title:
        additionalProperties:
          type: string
        type: object
    type: object
  entity.CreateMenuResponse:
    properties:
      content:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
      is_static:
        type: boolean
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      title:
        additionalProperties:
          type: string
        type: object
    type: object
  entity.CreateUserRequest:
    properties:
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.CreateUserResponse:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.DeleteMenuResponse:
    properties:
      message:
        type: string
    type: object
  entity.DeleteUserResponse:
    properties:
      message:
        type: string
    type: object
  entity.ForgetPasswordRequest:
    properties:
      username:
        type: string
    type: object
  entity.ForgetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  entity.GetMenuResponse:
    properties:
      content:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
      is_static:
        type: boolean
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      title:
        additionalProperties:
          type: string
        type: object
    type: object
  entity.GetUserResponse:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.ListMenuResponse:
    properties:
      menus:
        items:
          $ref: '#/definitions/entity.GetMenuResponse'
        type: array
      total:
        type: integer
    type: object
  entity.ListUserResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.GetUserResponse'
        type: array
    type: object
  entity.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  entity.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.NewAccessTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.ParentMenuWithChildren:
    properties:
      children: {}
      parent_menu:
        $ref: '#/definitions/entity.GetMenuResponse'
    type: object
  entity.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  entity.RegisterResponse:
    properties:
      message:
        type: string
    type: object
  entity.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      username:
        type: string
    type: object
  entity.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  entity.SiteMenuListResponse:
    properties:
      site_menus:
        items:
          $ref: '#/definitions/entity.ParentMenuWithChildren'
        type: array
      total:
        type: integer
    type: object
  entity.UpdateMenuColumnsRequest:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
    type: object
  entity.UpdateMenuRequest:
    properties:
      content:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
      is_static:
        type: boolean
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      title:
        additionalProperties:
          type: string
        type: object
    type: object
  entity.UpdateMenuResponse:
    properties:
      content:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
      is_static:
        type: boolean
      parent_id:
        type: integer
      path:
        type: string
      slug:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      title:
        additionalProperties:
          type: string
        type: object
    type: object
  entity.UpdatePasswordRequest:
    properties:
      id:
        type: integer
      new_password:
        type: string
    type: object
  entity.UpdatePasswordResponse:
    properties:
      message:
        type: string
    type: object
  entity.UpdateUserColumnsRequest:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
      id:
        type: integer
    type: object
  entity.UpdateUserRequest:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.UpdateUserResponse:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.VerifyOtpRequest:
    properties:
      otp:
        type: string
      username:
        type: string
    type: object
  entity.VerifyOtpResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  errors.Error:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/auth/forget-password:
    post:
      consumes:
      - application/json
      description: This API for sending request about forgot
      parameters:
      - description: Forgot Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ForgetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ForgetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Forget Password
      tags:
      - auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: This API for login
      parameters:
      - description: Login Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Login
      tags:
      - auth
  /v1/auth/new-access-token/:refresh:
    get:
      consumes:
      - application/json
      description: This API for getting a new access-token
      parameters:
      - description: Refresh Token
        in: path
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.NewAccessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get New Access
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: This API for validating email as register
      parameters:
      - description: Register Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Register
      tags:
      - auth
  /v1/auth/reset-password:
    put:
      consumes:
      - application/json
      description: This API for reset password
      parameters:
      - description: Reset Password Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Reset Password
      tags:
      - auth
  /v1/auth/update-password:
    put:
      consumes:
      - application/json
      description: This API for update password
      parameters:
      - description: Update Password Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdatePasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update Password
      tags:
      - auth
  /v1/auth/verify-otp:
    post:
      consumes:
      - application/json
      description: This API for verify one time password
      parameters:
      - description: Verify OTP Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.VerifyOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.VerifyOtpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Verify One Time Password
      tags:
      - auth
  /v1/menu:
    patch:
      consumes:
      - application/json
      description: This API for updating a menu columns
      parameters:
      - description: Update User Columns Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateMenuColumnsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update Menu Columns
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: This API for creating a new menu
      parameters:
      - description: Create User Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.CreateMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Create Menu
      tags:
      - menu
    put:
      consumes:
      - application/json
      description: This API for updating a menu
      parameters:
      - description: Update User Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update Menu
      tags:
      - menu
  /v1/menu/{id}:
    delete:
      consumes:
      - application/json
      description: This API for deleting a menu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.DeleteMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Delete menu
      tags:
      - menu
    get:
      consumes:
      - application/json
      description: This API for getting a menu
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get Menu
      tags:
      - menu
  /v1/menu/list:
    get:
      consumes:
      - application/json
      description: This API for getting menu list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListMenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get List Menu
      tags:
      - menu
  /v1/site/menu/list:
    get:
      consumes:
      - application/json
      description: This API for getting site parent menus with children
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SiteMenuListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get Site Menu
      tags:
      - menu
  /v1/user:
    patch:
      consumes:
      - application/json
      description: This API for updating a user columns
      parameters:
      - description: Update User Columns Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserColumnsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update User Columns
      tags:
      - user
    post:
      consumes:
      - application/json
      description: This API for creating a new user
      parameters:
      - description: Create User Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Create User
      tags:
      - user
    put:
      consumes:
      - application/json
      description: This API for updating a user
      parameters:
      - description: Update User Model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update User
      tags:
      - user
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: This API for deleting a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Delete User
      tags:
      - user
    get:
      consumes:
      - application/json
      description: This API for getting a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get User
      tags:
      - user
  /v1/user/list:
    get:
      consumes:
      - application/json
      description: This API for getting user list
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get List User
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
